To update the UI at multiple locations, we need to use hooks to handle state changes efficiently. In the given code:
function App() {
  let  counter = 15

  const addValue=()=>{
    console.log("clicked ",counter)
    counter = counter+1;
  }
  

  return (
    <>
      <h1>Hello nida</h1>
      <h2>Counter :{counter}</h2>
      <button onClick={addValue}>Add counter :{counter}</button>
      <br />
      <button>Decrease {counter}</button>
      <p>footer :{counter}</p>
    </>
  )
}

you can see that the counter value is used in multiple elements and buttons. If we were to use classic JavaScript, we would need to assign many references, such as 'getElementById' or 'getElementsByClassName,' which makes the code complex.

That's why we use hooks like useEffect and useState in React to manage UI updates efficiently. These hooks allow us to handle state and side effects declaratively, reducing the complexity of directly manipulating the DOM.


import { useState } from 'react'
// import reactLogo from './assets/react.svg'
// import viteLogo from '/vite.svg'
import './App.css'

function App() {
  let [counter,setCounter]=useState(15)
  // let  counter = 15

  const addValue=()=>{
    console.log("clicked ",counter)
    if(counter>=20){
      alert("maximum limit of counter")
      
    }
    else{
      setCounter(counter+1)
    }
   
  }
  const removeValue=()=>{
    if(counter<=0){
      alert("value cannot be negative")
    }
    else{
      setCounter(counter-1)
    }
  }

  return (
    <>
      <h1>Hello nida</h1>
      <h2>Counter :{counter}</h2>
      <button onClick={addValue}>Add counter :{counter}</button>
      <br />
      <button onClick={removeValue}>Decrease {counter}</button>
      <p>footer :{counter}</p>
    </>
  )
}

export default App
